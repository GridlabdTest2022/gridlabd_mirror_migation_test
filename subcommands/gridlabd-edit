#!/usr/local/bin/python3

import sys, os, warnings
import gridlabd_edit as gld

def main(args):

    if gld.parse(args):

        verbose(f"INPUTFILE = {gld.INPUTFILE}")
        verbose(f"OUTPUTFILE = {gld.OUTPUTFILE}")
        verbose(f"COMMANDS = {gld.COMMANDS}")
        verbose(f"KEYWORDS = {gld.KEYWORDS}")

        if gld.INPUTFILE and gld.INPUTFILE.isatty():
            error("input is a tty",gld.E_INVALID)

        if gld.INPUTFILE:
            gld.DATA = gld.read(gld.INPUTFILE)

        verbose(f"INPUT = {gld.DATA}")

        RESULT = gld.command(gld.DATA,*gld.COMMANDS,**gld.KEYWORDS)

        verbose(f"OUTPUT = {RESULT}")

        if gld.OUTPUTFILE:
            gld.write(RESULT,gld.OUTPUTFILE,indent=4)

def error(msg,code=None):
    if gld.MODE == "RELAX":
        return warning(msg)
    if not gld.QUIET:
        print(f"ERROR [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)
    if gld.DEBUG:
        print("Traceback (most recent call last):",file=sys.stderr)
        etype,evalue,etrace = sys.exc_info()
        import traceback
        traceback.print_tb(etrace)
        print(f"{etype.__name__}: {evalue}",file=sys.stderr,flush=True)
    if type(code) is int:
        exit(code)

def warning(msg):
    if gld.MODE == "STRICT":
        return error(msg,gld.E_FAILED)
    if gld.WARNING:
        print(f"WARNING [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)

def _warning(msg,category,filename,lineno,file,line):
    warning(f"{msg} (category={category.__name__}, filename={os.path.split(filename)[1]}, lineno={lineno})")
warnings.showwarning = _warning

def debug(msg):
    if gld.DEBUG:
        print(f"DEBUG [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)

def verbose(msg):
    if gld.VERBOSE:
        print(f"VERBOSE [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)

if __name__ == "__main__":

    try:
        
        if len(sys.argv) == 1:
            print("Syntax: gridlabd edit [OPTIONS ...] COMMAND [ARGUMENTS ...]",file=sys.stderr)
            exit(gld.E_SYNTAX)
        
        main(sys.argv[1:])

    except SystemExit:

        pass

    except FileNotFoundError as err:

        error(err,gld.E_ACCESS)

    except gld.GridlabdError as err:

        error(err,gld.E_FAILED)

    except Exception as err:

        etype, evalue, etrace = sys.exc_info()
        ename = etype.__name__
        efile = os.path.split(etrace.tb_frame.f_code.co_filename)[1]
        eline = etrace.tb_lineno
        error(f"{evalue} (exception={ename}, filename={efile}, lineno={eline}, exitcode={gld.E_EXCEPTION})",gld.E_EXCEPTION)

