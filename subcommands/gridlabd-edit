#!/usr/local/bin/python3
"""GridLAB-D edit subcommand

SYNTAX

Shell:

~~~
sh$ gridlabd edit [OPTIONS ...] COMMAND [ARGUMENTS ...]
~~~

GLM:

~~~
#edit [OPTIONS ...] COMMAND [ARGUMENTS ...]
~~~

OPTIONS

- `-i|--inputfile=INPUTFILE`: file to read (default `/dev/stdin`)

- `-o|--outputfile=OUTPUTFILE`: file to write (default `/dev/stdout`)

COMMANDS

- `create NAME [ARGUMENTS ...]`

- `delete {class,filter,global,module,object,schedule} NAME [--force]`

- `insert {class,filter,global,module,object,schedule} [PROPERTY=SPEC ...]`

- `update {class,filter,global,module,object,schedule} [PROPERTY=SPEC ...]`


DESCRIPTION

"""

import sys, os
import gridlabd_edit as gld

VERBOSE = False
DEBUG = False
QUIET = False
WARNING = True

E_OK = 0 # no error
E_INVALID = 1 # invalid arguments
E_FAILED = 2 # gridlabd error
E_ACCESS = 3 # file access error
E_SYNTAX = 9 # syntax error
E_EXCEPTION = 99 # exception caught

INPUTFILE = sys.stdin
OUTPUTFILE = sys.stdout
COMMANDS = []
KEYWORDS = {}
DATA = None

def main(args):

    global COMMANDS
    global KEYWORDS
    
    for arg in args:

        # extract arg specs
        spec = arg.split("=")
        tag = spec[0]
        if len(spec) == 1:
            value = None
        elif len(spec) == 2:
            value = spec[1]
        else:
            value = spec[1:]

        if tag in ['-d','--debug']:
            global DEBUG
            DEBUG = True
        elif tag in ['-i','--inputfile']:
            global INPUTFILE
            if value:
                INPUTFILE = open(value,"r")
            else:
                INPUTFILE = sys.stdin
        elif tag in ['-o','--outputfile']:
            global OUTPUTFILE
            if value:
                OUTPUTFILE = open(value,"w")
            else:
                OUTPUTFILE = sys.stdout
        elif tag in ['-q','--quiet']:
            global QUIET
            QUIET = True
        elif tag in ['-v','--verbose']:
            global VERBOSE
            VERBOSE = True
        elif tag in ['-w','--warning']:
            global WARNING
            WARNING = False
        elif value != None:
            if tag in KEYWORDS.keys():
                raise Exception(f"{arg}: key '{tag}'' already specified")
            else:
                KEYWORDS[tag] = value
        elif tag.startswith('-'):
            KEYWORDS[tag] = None
        else:
            if len(COMMANDS) == 0:
                if gld.VALID_COMMANDS[arg] == 0:
                    INPUTFILE = None                
            COMMANDS.append(arg)

    verbose(f"INPUTFILE = {INPUTFILE}")
    verbose(f"OUTPUTFILE = {OUTPUTFILE}")
    verbose(f"COMMANDS = {COMMANDS}")
    verbose(f"KEYWORDS = {KEYWORDS}")

    if INPUTFILE and INPUTFILE.isatty():
        error("input is a tty",E_INVALID)

    global DATA
    if INPUTFILE:
        DATA = gld.read(INPUTFILE)

    verbose(f"DATA = {DATA}")

    RESULT = gld.command(DATA,*COMMANDS,**KEYWORDS)

    verbose(f"RESULT = {DATA}")

    gld.write(RESULT,OUTPUTFILE,indent=4)

def error(msg,code=None):
    if not QUIET:
        print(f"ERROR [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)
    if DEBUG:
        print("Traceback (most recent call last):",file=sys.stderr)
        etype,evalue,etrace = sys.exc_info()
        import traceback
        traceback.print_tb(etrace)
        print(f"{etype.__name__}: {evalue}",file=sys.stderr,flush=True)
    if type(code) is int:
        exit(code)

def warning(msg):
    if WARNING:
        print(f"WARNING [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)

def debug(msg):
    if DEBUG:
        print(f"DEBUG [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)

def verbose(msg):
    if VERBOSE:
        print(f"VERBOSE [gridlabd-edit]: {msg}",file=sys.stderr,flush=True)

if __name__ == "__main__":

    try:
        
        if len(sys.argv) == 1:
            print("Syntax: gridlabd edit [OPTIONS ...] COMMAND [ARGUMENTS ...]",file=sys.stderr)
            exit(E_SYNTAX)
        
        main(sys.argv[1:])

    except SystemExit:

        pass

    except FileNotFoundError as err:

        error(err,E_ACCESS)

    except gld.GridlabdError as err:

        error(err,E_FAILED)

    except Exception as err:

        etype, evalue, etrace = sys.exc_info()
        ename = etype.__name__
        efile = etrace.tb_frame.f_code.co_filename
        eline = etrace.tb_lineno
        error(f"{evalue} (exception={ename}, file={efile}, line={eline}, exitcode={E_EXCEPTION})",E_EXCEPTION)

