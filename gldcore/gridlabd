#!/bin/sh

prefix="@@@PREFIX@@@"
python="@@@PYTHON_EXEC@@@"

exec_prefix="${prefix}"
bindir="${exec_prefix}bin"
datarootdir="${prefix}share"
datadir="${datarootdir}"
docdir="${datarootdir}/doc"
pkgdatadir="$datadir/gridlabd"
libdir="${exec_prefix}lib"
pkglibdir="$libdir/gridlabd"

HAS_DOCKER="no"
which docker > /dev/null 2>&1 && HAS_DOCKER="yes"
if test "x$1" = "xdocker" ; then :
  if test "x$HAS_DOCKER" = "xno"; then :
    echo "docker is not installed"
    exit 1
  elif test "x$2" = "xhelp"; then :
    echo "Syntax: gridlabd docker <command>"
    echo "Valid commands:"
    echo "  help             get a list of available docker control commands"
    echo "  enable <image>   enable a docker image as the active image"
    echo "  disable          disable the active image"
    echo "  status           list the gridlabd images (active image is called 'gridlabd')"
    exit 0
  elif test "x$2" = "xenable"; then :
    if test $# -eq 3; then :
      docker inspect $3 > /dev/null 2>&1 || docker pull $3
      docker tag $3 gridlabd
      docker images | head -n 1
      docker images | grep gridlabd
      exit 0
    else
      echo "missing docker image name"
      exit 1
    fi
  elif test "x$2" = "xdisable" ; then :
    docker rmi gridlabd > /dev/null 2>&1
    docker images | head -n 1
    docker images | grep gridlabd
    exit 0
  elif test "x$2" = "xstatus" ; then :
    docker images | head -n 1
    docker images | grep gridlabd
    exit 0
  else
    echo "Syntax: gridlabd --docker <command>|help"
    exit 1
  fi
fi
if test "x$HAS_DOCKER" = "xyes" ; then :
  HAS_IMAGE="no"
  docker inspect gridlabd > /dev/null 2>&1 && HAS_IMAGE="yes"
  if test "x$HAS_IMAGE" = "xyes" ; then :
    docker run -it -v ${PWD}:${PWD} gridlabd /usr/local/bin/gridlabd -W ${PWD} $@
    exit 0
  fi
fi

export GLD_ETC=$pkgdatadir
export GLD_BIN=$bindir
export GLD_LIB=$libdir
export GLD_DOC=$docdir
export PYCCFLAGS="$(${python}-config --cflags)"
export INCLUDE="-I$GLD_ETC -I/usr/local/include -I/usr/include"
export CFLAGS="${INCLUDE} ${PYCCFLAGS} ${CFLAGS}"
export CCFLAGS="${INCLUDE} ${PYCCFLAGS} ${CCFLAGS}"
export CPPFLAGS="${INCLUDE} ${PYCCFLAGS} ${CPPFLAGS}"
export CXXFLAGS="${INCLUDE} ${PYCCFLAGS} ${CXXFLAGS}"
export PYLDFLAGS="$(${python}-config --ldflags)"
export LIB="-L$libdir -L/usr/local/lib -L/usr/lib"
export LDFLAGS="${LIB} ${PYLDFLAGS} ${LDFLAGS}"
export PYTHONPATH=.:${GLD_ETC}${PYTHONPATH:+:}${PYTHONPATH}

if test "x$GLPATH" = x; then :
  export GLPATH="$pkglibdir:$pkgdatadir"
else
  export GLPATH="$pkglibdir:$pkgdatadir:$GLPATH"
fi

if test "x$1" = "xgdb" ; then :
  shift
  gdb -ex "run $@" $bindir/gridlabd.bin
  exit 0
elif test "x$1" = "xlldb" ; then :
  shift
  echo "run $@" > /tmp/gridlabd-$$
  lldb -s /tmp/gridlabd-$$ $bindir/gridlabd.bin
  rm /tmp/gridlabd-$$
  exit 0
elif test "x$1" = "xvalgrind" ; then :
  shift
  if test -z "${VALGRIND_OPTIONS}" ; then :
    echo "warning: VALGRIND_OPTIONS is not set, using default valgrind options"
  fi
  valgrind ${VALGRIND_OPTIONS} $bindir/gridlabd.bin $@
  exit 0
fi

if test -f "${pkgdatadir}/gridlabd.rc"; then :
  . ${pkgdatadir}/gridlabd.rc
fi

if test -x "${bindir}/gridlabd-$1"; then :
  "${bindir}/gridlabd"-"$@"
else
  "$bindir/gridlabd.bin" "$@"
fi
