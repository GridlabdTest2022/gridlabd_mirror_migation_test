#!/usr/local/bin/python3
"""GridLAB-D matrix subcommand

SYNTAX

GLM:
    #matrix [OPTIONS ...] FUNCTION [ARGUMENTS ...]

Shell:
    $ gridlabd matrix [OPTIONS ...] FUNCTION [ARGUMENTS ...]

Options:

    -c|--columns=NAMES  add column names
    -d|--debug          enable debugging output
    -e|--exception      raise exceptions on errors",file=sys.stdout)
    -f|--flatten        use semicolon as newline",file=sys.stdout)
    -h|--help PATTERN   print this help info",file=sys.stdout)
    -n|--name=NAME      add name to cell 0,0 when both columns and rows have
                        names
    -q|--quiet          suppress all output to stderr",file=sys.stdout)
    -r|--rows=NAMES     add row names
    -t|--transpose      transpose output
    -w|--warning        suppress warning output",file=sys.stdout)

DESCRIPTION

This module is a CLI for the python numpy matrix class and supporting linear
algebra library. The general syntax is

  shell% gridlabd matrix FUNCTION [ARGUMENTS ...]

where function is a numpy function that takes zero or more positional and/or
keyword arguments.  Position arguments may be provided explicitly as a
string, or implicitly from stdin.  Keyword argument are provided in the form
KEYWORD=VALUE.  

Examples:

1) Generate a matrix of random numbers

  shell% gridlabd matrix random.normal size=2,3
  -1.0435592,1.1823197,-0.20050981
  -1.4243777,1.1164794,1.2545108

2) Transpose a matrix

  shell% gridlabd matrix transpose '-0.43461221,-1.1657202,0.0063091172;0.10027139,0.71389914,1.9480481;'
  -0.43461221,0.10027139
  -1.1657202,0.71389914
  0.0063091172,1.9480481

3) Pipe data from one operation to another

  shell% gridlabd matrix random.normal size=2 | gridlabd matrix transpose
  -1.3058182
  0.18353732

Getting help:

The "help" command provide additional information on available functions using
the syntax:

  shell% gridlabd matrix help linalg
      linalg.cholesky <matrix>
      linalg.cond <matrix> p=<order>
      linalg.det <matrix>
      linalg.eig <matrix>
      linalg.eigh <matrix> UPLO=<str>
      linalg.eigvals <matrix>
      linalg.eigvalsh <matrix> UPLO=<str>
      linalg.inv <matrix>
      linalg.lstsq <matrix> <matrix> rcond=<float>
      linalg.matrix_rank <matrix>
      linalg.norm <matrix> ord=<order> axis=<int> keepdims=<bool>
      linalg.pinv <matrix>
      linalg.qr <matrix> mode=<str>
      linalg.slogdet <matrix>
      linalg.solve <matrix> <matrix>
      linalg.svd <matrix> full_matrices=<bool> compute_uv=<bool> hermitian=<bool>

Note: any matrix input argument can be provided as a URL, e.g.,

  shell% echo "1,2;3,4" > /tmp/A
  shell% gridlabd matrix transpose file:///tmp/A
  1,3
  2,4

FUNCTIONS

"""

# exit codes
E_OK = 0
E_NOARGS = 1
E_FAILED = 2
E_NOTFOUND = 3
E_INVALID = 4

import sys, os, subprocess, csv, urllib.request, re
cmdname = os.path.basename(sys.argv[0])
if not cmdname:
    cmdname = "matrix"
    exit_on_error = False
else:
    exit_on_error = True
def local_exit(code):
    if exit_on_error:
        exit(code)
    else: 
        return

import numpy
import numpy.matlib as matlib
import numpy.linalg as linalg
import pandas

#
# Argument types
#
def matrix(a):
    """Matrix or input file"""
    try: # normally it's a string that can be read as a matrix
        return numpy.matrix(a.rstrip(";"))
    except: # maybe it's a file
        pass
    try: # try item by item in case there are nans
        result = []
        for row in a.rstrip(";").split(";"):
            line = []
            for item in row.split(","):
                if item == '':
                    line.append(float('nan'))
                else:
                    line.append(float(item))
            result.append(line)
        return result
    except:
        pass
    try: # try load as a URL
        with urllib.request.urlopen(a) as req:
            return numpy.matrix(req.read().decode("utf-8"))
    except:
        pass
    error(f"invalid matrix or URL: '{a}'",E_INVALID)

def intlist(s):
    """Parse intlist as N[,M[,[...]]]"""
    return list(map(lambda n:int(n),s.split(',')))

def boollist(s):
    """Parse intlist as N[,M[,[...]]]"""
    return list(map(lambda n:bool(n),s.split(',')))

def tuplelist(s):
    """Parse intlist as N[,M[,[...]]]"""
    return list(map(lambda n:intlist(n),s.split(',')))

def intlist_args(*s):
    """Parse arguments as integer list"""
    return list(map(lambda n:int(n),*s))

def inttuple(s):
    """Parse inttuple as N[,M[,[...]]]"""
    return tuple(map(lambda n:int(n),s.split(',')))

def arrayorint(a):
    try:
        return int(a)
    except:
        pass
    return numpy.array(numpy.matrix(a).flatten())[0]

def array(a):
    return numpy.array(numpy.matrix(a).flatten())[0]

def order(a):
    if a in ["inf","-inf"]:
        return float(a)
    try:
        return int(a)
    except:
        return a

#
# Arguments and options
#
POSITIONAL="ARGS" # keyword for required arguments
VARARGS = [intlist_args] # variable argument list handlers
UARGS = "UFUNC" # keywork for kwargs for ufunc
UFUNC = {
    "where" : boollist,
    "axes" : tuplelist,
    "axis" : inttuple,
    "keepdims" : bool,
    "casting" : str,
    "order" : str,
    "dtype" : str,
    "subok" : bool,
}
UKEYS = list(UFUNC.keys())
functions = {

    # numpy utilities
    "arange" :
    {
        POSITIONAL : [float,float],
        "step" : float,
        UARGS : ["subok"],
    },
    "copy" :
    {
        POSITIONAL : [matrix],
    },

    # arithmetic
    "add" :
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "reciprocal" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "positive" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "negative" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "multiply" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "divide" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "power" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "subtract" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "true_divide" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "floor_divide" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "float_power" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "fmod" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "mod" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "modf" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "remainder" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "divmod" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    
    # complex numbers
    "angle" : 
    {
        POSITIONAL : [matrix],
        "deg" : bool,
    },
    "real" : 
    {
        POSITIONAL : [matrix],
    },
    "imag" : 
    {
        POSITIONAL : [matrix],
    },
    "conj" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "conjugate" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },

    # miscellaneous
    "convolve" : 
    {
        POSITIONAL : [array,array],
        "mode" : str,
    },
    "clip" : 
    {
        POSITIONAL : [matrix],
        "a_min" : matrix,
        "a_max" : matrix,
        UARGS : UKEYS,
    },
    "sqrt" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "cbrt" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "square" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "absolute" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "fabs" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "sign" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "heaviside" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "maximum" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "minimum" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "fmax" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "fmin" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    # "nan_to_num" : 
    # {
    #   POSITIONAL : [matrix],
    #   UARGS : UKEYS,
    # },
    "real_if_close" : 
    {
        POSITIONAL : [matrix],
        "tol" : float
    },
    "interp" : 
    {
        POSITIONAL : [array,array,array],
        "left" : float,
        "right" : float,
        "period" : float,
    },

    # trigonometric
    "sin" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "cos" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "tan" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "arcsin" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "arccos" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "arctan" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "hypot" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "arctan2" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "degrees" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "radians" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "unwrap" : 
    {
        POSITIONAL : [matrix],
        "discont" : float,
        "axis" : int,
        "period" : float,
    },
    "deg2rad" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "rad2deg" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },

    # hyperbolic functions
    "sinh" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "cosh" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "tanh" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "arcsinh" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "arccosh" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "arctanh" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },

    # rounding
    "around" : 
    {
        POSITIONAL : [matrix],
        "decimals" : int,
    },
    "round_" : 
    {
        POSITIONAL : [matrix],
        "decimals" : int,
    },
    "rint" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "fix" : 
    {
        POSITIONAL : [matrix],
    },
    "floor" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "ceil" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "trunc" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    
    # sums, profducts, differences
    "prod" : 
    {
        POSITIONAL : [matrix],
        "initial" : float,
        UARGS : ["axis","dtype","keepdims","where"],
    },
    "sum" : 
    {
        POSITIONAL : [matrix],
        "initial" : float,
        UARGS : ["axis","dtype","keepdims","where"],
    },
    "nanprod" : 
    {
        POSITIONAL : [matrix],
        "initial" : float,
        UARGS : ["axis","dtype","keepdims","where"],
    },
    "nansum" : 
    {
        POSITIONAL : [matrix],
        "initial" : float,
        UARGS : ["axis","dtype","keepdims","where"],
    },
    "cumprod" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
        UARGS : ["dtype"],
    },
    "cumsum" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
        UARGS : ["dtype"],
    },
    "nancumprod" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
        UARGS : ["dtype"],
    },
    "nancumsum" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
        UARGS : ["dtype"],
    },
    "diff" : 
    {
        POSITIONAL : [matrix],
        "n" : int,
        "axis" : int,
        "prepend" : matrix,
        "append" : matrix,
        UARGS : [],
    },
    # "ediff1d" : 
    # {
    #   POSITIONAL : [matrix],
    #   "to_end" : matrix,
    #   "to_begin" : matrix,
    # },
    "gradient" : 
    {
        POSITIONAL : [matrix],
        "spacing" : matrix,
        "edge_order" : int,
        UARGS : ["axis"]
    },
    "cross" : 
    {
        POSITIONAL : [matrix,matrix],
        "axisa" : int,
        "axisb" : int,
        "axisc" : int,
        "axis" : int,
    },
    "trapz" : 
    {
        POSITIONAL : [matrix],
        "x" : matrix,
        "dx" : float,
        "axis" : int,
    },
    
    # exponents and logarithms
    "exp" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "expm1" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "exp2" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "log" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "log10" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "log2" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "log1p" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "logaddexp" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "logaddexp2" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },

    # other special functions
    "i0" : 
    {
        POSITIONAL : [array],
    },
    "sinc" : 
    {
        POSITIONAL : [matrix],
    },

    # floating point routines
    "signbit" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "copysign" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "frexp" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },
    "ldexp" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "nextafter" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "spacing" : 
    {
        POSITIONAL : [matrix],
        UARGS : UKEYS,
    },

    # rational routines
    "lcm" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },
    "gcd" : 
    {
        POSITIONAL : [matrix,matrix],
        UARGS : UKEYS,
    },

    # numpy 
    "eye" :
    {
        POSITIONAL : [int],
        "M" : int,
        "k" : int,
        "dtype" : str,
        "order" : str,
    },
    "identity" :
    {
        POSITIONAL : [int],
        "dtype" : str,
    },
    "ones" : 
    {
        POSITIONAL : [intlist],
        "dtype" : str,
        "order" : str,
    },
    "dot" :
    {
        POSITIONAL : [matrix,matrix],
    },
    "trace" :
    {
        POSITIONAL : [matrix],
        "offset" : int,
        "axis" : int,
        "dtype" : str,
    },
    "transpose" : 
    {
        POSITIONAL : [matrix],
    },
    "zeros" :
    {
        POSITIONAL : [intlist],
        "dtype" : str,
        "order" : str,
    },

    # linag
    "linalg.cholesky" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.cond" :
    {
        POSITIONAL : [matrix],
        "p" : order,
    },
    "linalg.det" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.eig" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.eigh" :
    {
        POSITIONAL : [matrix],
        "UPLO" : str,
    },
    "linalg.eigvals" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.eigvalsh" :
    {
        POSITIONAL : [matrix],
        "UPLO" : str,
    },
    "linalg.inv" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.lstsq" : 
    {
        POSITIONAL : [matrix,matrix],
        "rcond" : float,
    },
    "linalg.matrix_rank" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.norm" :
    {
        POSITIONAL : [matrix],
        "ord" : order,
        "axis" : int,
        "keepdims" : bool,
    },
    "linalg.pinv" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.qr" :
    {
        POSITIONAL : [matrix],
        "mode" : str,
    },
    "linalg.slogdet" :
    {
        POSITIONAL : [matrix],
    },
    "linalg.solve" : 
    {
        POSITIONAL : [matrix,matrix],
    },
    "linalg.svd" : 
    {
        POSITIONAL : [matrix],
        "full_matrices" : bool,
        "compute_uv" : bool,
        "hermitian" : bool,
    },

    # matlib
    "matlib.rand" :
    {
        POSITIONAL : intlist_args,
    },
    "matlib.randn" :
    {
        POSITIONAL : intlist_args,
    },
    "matlib.repmat" : 
    {
        POSITIONAL : [matrix, int, int],
    },

    # matrix
    "matrix.all" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
    },
    "matrix.any" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
    },
    "matrix.argmax" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
    },
    "matrix.argmin" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
    },
    "matrix.argpartition" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
        "kind" : str,
        "order" : intlist,
    },
    "matrix.argsort" : 
    {
        POSITIONAL : [matrix],
        "axis" : int,
        "kind" : str,
        "order" : intlist,
    },
    "matrix.astype" :
    {
        POSITIONAL : [matrix],
        "order" : str,
        "casting" : str,
        "subok" : bool,
    },
    "matrix.byteswap" :
    {
        POSITIONAL : [matrix],
    },
    "matrix.choose" :
    {
        POSITIONAL : [matrix,intlist],
        "mode" : str,
    },
    "matrix.clip" :
    {
        POSITIONAL : [matrix],
        "min" : float,
        "max" : float,
        UARGS : UKEYS,
    },
    "matrix.compress" : {
        POSITIONAL : [matrix],
    },
    "matrix.conj" : {
        POSITIONAL : [matrix],
    },
    "matrix.conjugate" : {
        POSITIONAL : [matrix],
    },
    "matrix.cumprod" : {
        POSITIONAL : [matrix],
    },
    "matrix.cumsum" : {
        POSITIONAL : [matrix],
    },
    "matrix.diagonal" : {
        POSITIONAL : [matrix],
    },
    "matrix.dot" : {
        POSITIONAL : [matrix],
    },
    "matrix.fill" : {
        POSITIONAL : [matrix],
    },
    "matrix.flatten" : {
        POSITIONAL : [matrix],
    },
    "matrix.getH" : {
        POSITIONAL : [matrix],
    },
    "matrix.getI" : {
        POSITIONAL : [matrix],
    },
    "matrix.getT" : {
        POSITIONAL : [matrix],
    },
    "matrix.getfield" : {
        POSITIONAL : [matrix],
    },
    "matrix.item" : {
        POSITIONAL : [matrix],
    },
    "matrix.itemset" : {
        POSITIONAL : [matrix],
    },
    "matrix.max" : {
        POSITIONAL : [matrix],
    },
    "matrix.mean" : {
        POSITIONAL : [matrix],
    },
    "matrix.min" : {
        POSITIONAL : [matrix],
    },
    "matrix.nonzero" : {
        POSITIONAL : [matrix],
    },
    "matrix.partition" : {
        POSITIONAL : [matrix],
    },
    "matrix.prod" : {
        POSITIONAL : [matrix],
    },
    "matrix.ptp" : {
        POSITIONAL : [matrix],
    },
    "matrix.put" : {
        POSITIONAL : [matrix],
    },
    "matrix.ravel" : {
        POSITIONAL : [matrix],
    },
    "matrix.repeat" : {
        POSITIONAL : [matrix],
    },
    "matrix.reshape" : {
        POSITIONAL : [matrix],
    },
    "matrix.resize" : {
        POSITIONAL : [matrix],
    },
    "matrix.round" : {
        POSITIONAL : [matrix],
    },
    "matrix.searchsorted" : {
        POSITIONAL : [matrix],
    },
    "matrix.setfield" : {
        POSITIONAL : [matrix],
    },
    "matrix.sort" : {
        POSITIONAL : [matrix],
    },
    "matrix.squeeze" : {
        POSITIONAL : [matrix],
    },
    "matrix.std" : {
        POSITIONAL : [matrix],
    },
    "matrix.sum" : {
        POSITIONAL : [matrix],
    },
    "matrix.swapaxes" : {
        POSITIONAL : [matrix],
    },
    "matrix.take" : {
        POSITIONAL : [matrix],
    },
    "matrix.trace" : {
        POSITIONAL : [matrix],
    },
    "matrix.transpose" : {
        POSITIONAL : [matrix],
    },
    "matrix.var" : {
        POSITIONAL : [matrix],
    },

    # random
    "random.normal" : 
    {
        POSITIONAL : [],
        "loc" : matrix, 
        "scale" : matrix,
        "size" : intlist,
    },
    "random.rand" : 
    {
        POSITIONAL : intlist_args
    },
    "random.randn" : 
    {
        POSITIONAL : intlist_args
    },
    "random.randint" : 
    {
        POSITIONAL : [int],
        "high" : int,
        "size" : intlist,
        "dtype" : str,
    },
    "random.random_sample" : 
    {
        POSITIONAL : [],
        "size" : intlist,
    },
    "random.random" : 
    {
        POSITIONAL : [],
        "size" : intlist,
    },
    "random.ranf" :
    {
        POSITIONAL : [],
        "size" : intlist,
    },
    "random.sample" :
    {
        POSITIONAL : [],
        "size" : intlist,
    },
    "random.choice" :
    {
        POSITIONAL : [arrayorint],
        "size" : intlist,
        "replace" : bool,
        "p" : array,    
    },

}

#
# Configuration values
#
class config:
    warning = True
    quiet = False
    debug = False
    exception = False
    delimiter = ","
    newline = '\n'
    float_format = "%.8g"
    complex_format = "%.8g%+.8gj"
    transpose = False
    columns = None
    rows = None
    name = None


numpy.set_printoptions(threshold=sys.maxsize)

#
# Output routines
#
def output(result):
    if type(result) == type(None):
        return
    if type(result) == tuple:
        for item in result:
            output(item)
    elif type(result) == list:    
        # print(list(map(lambda y: config.newline.join(list(map(lambda x: ",".join(x),y))),result)),file=sys.stdout)
        for row in result:
            first_item = True 
            for item in row:
                if first_item:
                    first_item = False
                else:
                    print(config.delimiter,end="",file=sys.stdout)
                if type(item) is float:
                    print(config.float_format%item,end="",file=sys.stdout)
                elif type(item) is complex:
                    print(config.complex_format%(item.real,item.imag),end="",file=sys.stdout)
                elif type(item) is bool:
                    print(int(item),end="",file=sys.stdout)
                else:
                    print(str(item),end="",file=sys.stdout)
            print(config.newline,end="",file=sys.stdout)
    elif type(result) == str:
        print(result,file=sys.stdout)
    else:
        if config.transpose:
            if not hasattr(result,"transpose"):
                error("cannot transpose result".E_FAILED)
            result = result.transpose()
        if config.rows or config.columns:
            df = pandas.DataFrame(result,
                index = config.rows,
                columns = config.columns)
            if config.rows and config.columns and config.name != None:
                df.index.name = config.name
            df.to_csv(sys.stdout,
                line_terminator = config.newline,
                sep = config.delimiter,
                float_format = config.float_format,
                index = bool(config.rows),
                header = bool(config.columns))
        else:
            output(numpy.matrix(result).tolist())

def warning(msg):
    if config.warning:
        print(f"WARNING [{cmdname}]: {msg}",file=sys.stderr)

def error(msg,code=None):
    if not config.quiet:
        print(f"ERROR [{cmdname}]: {msg}",file=sys.stderr)
    if config.exception:
        raise Exception(msg)
    elif code != None:
        return local_exit(code)
    
def debug(msg):
    if config.debug:
        print(f"DEBUG [{cmdname}]: {msg}",file=sys.stderr)

def makedocs():
    if not os.path.exists("docs/Subcommand/Matrix"):
        error("'docs/Subcommand/Matrix' folder does not exist",E_NOTFOUND)
    for function in functions.keys():
        specs = function.split(".")
        path = "/".join(list(map(lambda n:n.title(),specs[0:-1])))
        if len(specs) > 1:
            path = "/" + path
            os.makedirs("docs/Subcommand/Matrix"+path.title(),exist_ok=True)
        name = specs[-1].title()
        with open(f"docs/Subcommand/Matrix{path}/{name}.md","w") as fh:
            lib = numpy
            for pkg in specs[0:-1]:
                lib = getattr(lib,pkg)
            call = getattr(lib,specs[-1])
            NL="\n"
            docs = call.__doc__.split(NL)
            fspecs = functions[function]
            args = []
            for tag, value in fspecs.items():
                if tag == POSITIONAL:
                    if type(value) is list:
                        for item in value:
                            args.append(f"<{item.__name__}>")
                    else:
                        args.append(f"<{value.__name__}>")
                elif tag == UARGS:
                    for utag in value:
                        uval = UFUNC[utag]
                        args.append(f"[{utag}=<{uval.__name__}>]")
                elif hasattr(value,"__name__"):
                    args.append(f"{tag}=<{value.__name__}>")
                else:
                    args.append(f"[{tag}=<{str(value)}>]")
            try:
                parameters = docs.index("Parameters")
            except:
                parameters = 0
            try:
                examples = docs.index("Examples")
            except:
                examples = -1
            if parameters > 0:
                fh.write(f"[[{path}/{name}]] -- {docs[2]}")
            else:
                fh.write(f"[[{path}/{name}]]")              
            fh.write("\n\n~~~\n")
            fh.write(f"Syntax\n------\n\n")
            fh.write(f"matrix {specs[-1]} {' '.join(args)}\n\n")
            fh.write("\n".join(docs[parameters:examples]))
            fh.write("\n~~~\n")

def help(name='.*'):
    if name in list(functions.keys()):
        if not name in functions.keys():
            error(f"'{name}' not found",code=E_NOTFOUND)
        sys.stderr = sys.stdout
        package = name.split('.')
        lib = numpy
        for pkg in package[0:-1]:
            lib = getattr(lib,pkg)
        call = getattr(lib,package[-1])
        specs = functions[name]
        args = []
        for tag, value in specs.items():
            if tag in POSITIONAL:
                if type(value) is list:
                    for item in value:
                        args.append(f"<{item.__name__}>")
                else:
                    args.append(f"<{value.__name__}>")
            elif tag == UARGS:
                for utag in value:
                    ufunc = UFUNC[utag]
                    args.append(f"[{utag}=<{UFUNC[utag].__name__}>]")
            else:
                args.append(f"{tag}=<{value.__name__}>")
        print("matrix",name," ".join(args),file=sys.stdout)
        output(call.__doc__)
    elif name:
        count = 0
        if name == '.*':
            print(__doc__,file=sys.stdout)
        for function in sorted(list(functions.keys())):
            if not re.match(name,function): 
                continue
            specs = functions[function]
            args = []
            for tag, value in specs.items():
                if tag == POSITIONAL:
                    if type(value) is list:
                        for item in value:
                            args.append(f"<{item.__name__}>")
                    else:
                        args.append(f"<{value.__name__}>")
                elif tag == UARGS:
                    for utag in value:
                        ufunc = UFUNC[utag]
                        args.append(f"[{utag}=<{UFUNC[utag].__name__}>]")
                else:
                    args.append(f"{tag}=<{value.__name__}>")
            print(" ",function," ".join(args),file=sys.stdout)
            count += 1
        if count == 0:
            error(f"no help for {name}",E_INVALID)
    else:
        print(f"Syntax: {cmdname} [OPTIONS ...] FUNCTION [ARGUMENTS ...]")

#
# Main function
#
def main(argv):
    done = False
    while not done and len(argv) > 1:
        if argv[1] in ["-w","--warning"]:
            config.warning = not config.warning
            del argv[1]
        elif argv[1] in ["-q","--quiet"]:
            config.quiet = not config.quiet
            del argv[1]
        elif argv[1] in ["-d","--debug"]:
            config.debug = not config.debug
            del argv[1]
        elif argv[1] in ["-e","--exception"]:
            config.exception = not config.exception
            del argv[1]
        elif argv[1] in ["-f","--flatten"]:
            config.newline = ';'
            del argv[1]
        elif argv[1] in ["-h","--help"]:
            argv[1] = "help"
        elif argv[1] in ["-v","--version"]:
            argv[1] = "version"
        elif argv[1] in ["-t","--transpose"]:
            config.transpose = True
            del argv[1]
        elif argv[1].startswith("-c=") or argv[1].startswith("--columns="):
            config.columns = argv[1].split("=")[1].split(",")
            del argv[1]
        elif argv[1].startswith("-r=") or argv[1].startswith("--rows="):
            config.rows = argv[1].split("=")[1].split(",")
            del argv[1]
        elif argv[1].startswith("-n=") or argv[1].startswith("--name="):
            config.name = argv[1].split("=")[1]
            del argv[1]
        elif argv[1] == "--makedocs":
            makedocs()
            return local_exit(E_OK)
        elif argv[1][0] == '-':
            error(f"option '{argv[1]}' is not valid",code=E_INVALID)
        else:
            done = True

    if len(argv) < 2:
        help(None)
        return local_exit(E_NOARGS)
    elif argv[1] == "help":
        if len(argv) == 2:
            help()
            return local_exit(E_OK)
        elif len(argv) == 3 and argv[1] == "help":
            help(argv[2])
            return local_exit(E_OK)
        else:
            error("too many help functions requested",code=E_INVALID)
    elif argv[1] == "version":
        print(numpy.__version__,file=sys.stdout)
        return local_exit(E_OK)
    try:
        package = argv[1].split('.')
        lib = numpy
        for name in package[0:-1]:
            lib = getattr(lib,name)
        call = getattr(lib,package[-1])
    except:
        if config.exception:
            raise
        error(f"'{argv[1]}' not found",code=E_NOTFOUND)

    try:
        args = []
        kwargs = {}
        pos = 0
        name = argv[1]
        function = functions[name]
        if function[POSITIONAL] in VARARGS:
            atype = function[POSITIONAL]
            if len(argv) > 2:
                args = atype(argv[2:])
        else:
            for arg in argv[2:]:
                spec = arg.split("=")
                if len(spec) < 2:
                    if pos >= len(function[POSITIONAL]):
                        error("too many positional argument",E_INVALID)
                    atype = function[POSITIONAL][pos]
                    args.append(atype(arg))
                    pos += 1
                elif spec[0] in function.keys():
                    atype = function[spec[0]]
                    kwargs[spec[0]] = atype(spec[1])
                elif UARGS in function.keys() and spec[0] in function[UARGS]:
                    atype = UFUNC[spec[0]]
                    kwargs[spec[0]] = atype(spec[1])
                else:
                    error(f"'{arg}' is an invalid argument",E_INVALID)
            while len(args) < len(function[POSITIONAL]):
                if sys.stdin.isatty():
                    error("missing positional argument",E_INVALID)
                atype = function[POSITIONAL][pos]
                data = sys.stdin.readlines()
                args.append(atype(";".join(data)))
                pos += 1
        if args and kwargs:
            result = call(*args,**kwargs)
        elif args:
            result = call(*args)
        elif kwargs:
            result = call(**kwargs)
        else:
            result = call()
        output(result)
    except Exception as info:
        output("MATRIXERROR")
        if config.exception:
            raise
        error(f"'{' '.join(argv[1:])}' failed - {info}",E_FAILED)

    return local_exit(E_OK)

if __name__ == '__main__':
    main(sys.argv)
