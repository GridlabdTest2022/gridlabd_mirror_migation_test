#assert $(gridlabd matrix version) == '1.21.4'

// matrix.all <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,5,6;") == '1;'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,5,6;" axis=0) == '1,1,1;'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,5,6;" axis=1) == '1;1;'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,0,6;") == '0;'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,0,6;" axis=0) == '1,0,1;'
#assert $(gridlabd matrix -f matrix.all "1,2,3;4,0,6;" axis=1) == '1;0;'

// matrix.any <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.any "1,0,0;0,0,0") == '1;'
#assert $(gridlabd matrix -f matrix.any "1,0,0;0,0,0" axis=0) == '1,0,0;'
#assert $(gridlabd matrix -f matrix.any "1,0,0;0,0,0" axis=1) == '1;0;'

// matrix.argmax <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.argmax "1,2;3,4") == '3;'
#assert $(gridlabd matrix -f matrix.argmax "1,2;3,4" axis=0) == '1,1;'
#assert $(gridlabd matrix -f matrix.argmax "1,2;3,4" axis=1) == '1;1;'

// matrix.argmin <matrix> axis=<int>
#assert $(gridlabd matrix -f matrix.argmin "1,2;3,4") == '0;'
#assert $(gridlabd matrix -f matrix.argmin "1,2;3,4" axis=0) == '0,0;'
#assert $(gridlabd matrix -f matrix.argmin "1,2;3,4" axis=1) == '0;0;'

// matrix.argpartition <matrix> axis=<int> kind=<str> order=<intlist>
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0) == '0,1;0,1;'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0 axis=0) == '0,0;1,1;'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0 axis=1) == '0,1;0,1;'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 1) == '0,1;0,1;'
#assert $(gridlabd matrix -f matrix.argpartition "1,2;3,4" 0 kind=introselect) == '0,1;0,1;'

// matrix.argsort <matrix> axis=<int> kind=<str> order=<intlist>
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;") == '1,0,2;2,1,0;2,1,0;'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" axis=0) == '0,1,1;1,0,2;2,2,0;'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" axis=1) == '1,0,2;2,1,0;2,1,0;'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=quicksort) == '1,0,2;2,1,0;2,1,0;'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=mergesort) == '1,0,2;2,1,0;2,1,0;'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=heapsort) == '1,0,2;2,1,0;2,1,0;'
#assert $(gridlabd matrix -f matrix.argsort "5,4,9;7,3,1;8,6,2;" kind=stable) == '1,0,2;2,1,0;2,1,0;'

// matrix.astype <matrix> order=<str> casting=<str> subok=<boolstr>
#assert $(gridlabd matrix -f matrix.astype "1,2,3;4,5,6" complex) == '1+0j,2+0j,3+0j;4+0j,5+0j,6+0j;'
#assert $(gridlabd matrix -f matrix.astype "1.2,3.4,5.6;" int) == '1,3,5;'

// matrix.byteswap <matrix>
#assert $(gridlabd matrix -f matrix.byteswap "1.2,3.4,5.6;") == '4.6672615e-62,4.6672615e-62,1.9035986e+185;'

// matrix.choose <matrix> <intlist> mode=<str>
#assert $(gridlabd matrix -f matrix.choose "1" 1,2,3,4) == '2;'
#assert $(gridlabd matrix -f matrix.choose "1" 1,2,3,4 mode=raise) == '2;'
#assert $(gridlabd matrix -f matrix.choose "6" 1,2,3,4 mode=wrap) == '3;'
#assert $(gridlabd matrix -f matrix.choose "6" 1,2,3,4 mode=clip) == '4;'

// matrix.clip <matrix> min=<float> max=<float> [where=<boollist>] [axes=<tuplelist>] [axis=<inttuple>] [keepdims=<boolstr>] [casting=<str>] [order=<str>] [dtype=<str>] [subok=<boolstr>]
#assert $(gridlabd matrix -f matrix.clip "1,2,3,4;5,6,7,8" min=2) == '2,2,3,4;5,6,7,8;'
#assert $(gridlabd matrix -f matrix.clip "1,2,3,4;5,6,7,8" max=7) == '1,2,3,4;5,6,7,7;'
#assert $(gridlabd matrix -f matrix.clip "1,2,3,4;5,6,7,8" min=2 max=7) == '2,2,3,4;5,6,7,7;'

// matrix.compress <matrix>
#assert --warn --quiet $(gridlabd matrix -f matrix.compress "0,1" "1,2;3,4;5,6" axis=0) == '3,4;'

// matrix.conj <matrix>
#assert $(gridlabd matrix -f matrix.conj "0+1j,1-2j") == '0-1j,1+2j;'

// matrix.conjugate <matrix>
#assert $(gridlabd matrix -f matrix.conjugate "0+1j,1-2j") == '0-1j,1+2j;'

// matrix.cumprod <matrix>
#assert $(gridlabd matrix -f matrix.cumprod "0+1j,1-2j") == '0+1j,2+1j;'

// matrix.cumsum <matrix>
#assert $(gridlabd matrix -f matrix.cumsum "0+1j,2+1j;") == '0+1j,2+2j;'

// matrix.diagonal <matrix>
#assert $(gridlabd matrix -f matrix.diagonal "1,2;3,4") == '1,4;'

// matrix.dot <matrix>
#assert $(gridlabd matrix -f matrix.dot "1,2;3,4" "1,2;3,4") == '7,10;15,22;'

// matrix.fill <matrix>
#assert $(gridlabd matrix -f matrix.fill "1,2;3,4" 5) == '5,5;5,5;'
#assert $(gridlabd matrix -f matrix.fill "1,2;3,4+0j" 5) == '5+0j,5+0j;5+0j,5+0j;'

// matrix.flatten <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.getH <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.getI <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.getT <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.getfield <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.item <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.itemset <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.max <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.mean <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.min <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.nonzero <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.partition <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.prod <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.ptp <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.put <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.ravel <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.repeat <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.reshape <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.resize <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.round <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.searchsorted <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.setfield <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.sort <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.squeeze <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.std <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.sum <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.swapaxes <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.take <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.trace <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.transpose <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

// matrix.var <matrix>
//#assert $(gridlabd matrix -f matrix.FUNCTION "MATRIX") == 'RESULT'

